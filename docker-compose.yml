version: "3.8"

services:
  user-service:
    build: ./services/user-service
    ports:
      - "5001:5001"
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DB_USER: admin
      DB_PASSWORD: admin
      DB_HOST: user-db
      DB_PORT: 5432
      DB_NAME: userdb
    networks:
      - app-network

  product-service:
    build: ./services/product-service
    ports:
      - "5002:5002"
    depends_on:
      product-db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DB_USER: admin
      DB_PASSWORD: admin
      DB_HOST: product-db
      DB_PORT: 5432
      DB_NAME: productdb
    networks:
      - app-network

  user-db:
    image: postgres:16
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: userdb
    ports:
      - "5433:5432"  # Change port to avoid conflicts
    volumes:
      - user_pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d userdb"]
      interval: 10s
      retries: 5
      timeout: 5s

  product-db:
    image: postgres:16
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: productdb
    ports:
      - "5434:5432"
    volumes:
      - product_pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d productdb"]
      interval: 10s
      retries: 5
      timeout: 5s
  
  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  user_pgdata:
  product_pgdata:

networks:
  app-network:
    driver: bridge
